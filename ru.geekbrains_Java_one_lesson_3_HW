package ru.geekbrains_Java_one_lesson_3_HW;

import java.util.Random;
import java.util.Scanner;

    public class Les3_TicTacToe {

        private static final char DOT_HUMAN = 'X';
        private static final char DOT_AI = 'O';
        private static final char DOT_EMPTY = '_';

        private static int fieldSizeX;
        private static int fieldSizeY;
        private static int Size = fieldSizeX || fieldSizeY; // объединил для цикла
        private static char[][] field;

        private static final Scanner SCANNER = new Scanner(System.in);
        private static final Random RANDOM = new Random();

        private static void initField() {
            fieldSizeY = 3;
            fieldSizeX = 3;
            field = new char[fieldSizeY][fieldSizeX];
            for (int y = 0; y < fieldSizeY; y++) {
                for (int x = 0; x < fieldSizeX; x++) {
                    field[y][x] = DOT_EMPTY;
                }
            }
        }

        private static void printField() {
            System.out.println("------");
            for (int y = 0; y < fieldSizeY; y++) {
                for (int x = 0; x < fieldSizeX; x++) {
                    System.out.print(field[y][x] + "|");
                }
                System.out.println();
            }
        }

        private static boolean isValidCell(int x, int y) {
            return x >= 0 && x < fieldSizeX && y >=0 && y < fieldSizeY;
        }

        private static boolean isEmptyCell(int x, int y) {
            return field[y][x] == DOT_EMPTY;
        }

        private static void humanTurn() {
            int x;
            int y;
            do {
                System.out.println("" +
                        ">>> ");
                x = SCANNER.nextInt() - 1;
                y = SCANNER.nextInt() - 1;
            } while (!isValidCell(x, y) || !isEmptyCell(x, y));
            field[y][x] = DOT_HUMAN;
        }

        private static void aiTurn() {
            int x;
            int y;
            do {
                x = RANDOM.nextInt(fieldSizeX);
                y = RANDOM.nextInt(fieldSizeY);
            } while (!isEmptyCell(x, y));
            field[y][x] = DOT_AI;

        }

        private static boolean isFieldFull() {
            for (int y = 0; y < fieldSizeY; y++) {
                for (int x = 0; x < fieldSizeX; x++) {
                    if (field[y][x] == DOT_EMPTY) return false;
                }
            }
            return true;
        }

        private static boolean checkWin(char c) {
            return checkWinHor() || checkWinVert() || checkWinDiag();
        }

        private boolean checkWinHor() {   //проверка по гризонтали
            for (int i = 0; i < Size; i++) {
                boolean res = true;
                for (int j = 1; j < Size && res; j++)
                    res = field[i][j] == field[i][0];
                if (res)
                    return true;
            }
            return false;
        }

        private boolean checkWinVert() {    //проверка по вертикали
            for (int i = 0; i < Size; i++) {
                boolean res = true;
                for (int j = 1; j < Size && res; j++)
                    res = field[j][i] == field[0][i];
                if (res)
                    return true;
            }
            return false;
        }

        private boolean checkWinDiag() {    //пока в работе..._проверка по диагонали

        }
        }
        /*private static boolean checkWin(char c) {
            if (field[0][0] == c && field[0][1] == c && field[0][2] == c) return true;
            if (field[1][0] == c && field[1][1] == c && field[1][2] == c) return true;
            if (field[2][0] == c && field[2][1] == c && field[2][2] == c) return true;

            if (field[0][0] == c && field[1][0] == c && field[2][0] == c) return true;
            if (field[0][1] == c && field[1][1] == c && field[2][1] == c) return true;
            if (field[0][2] == c && field[1][2] == c && field[2][2] == c) return true;

            if (field[0][0] == c && field[1][1] == c && field[2][2] == c) return true;
            if (field[0][2] == c && field[1][1] == c && field[2][0] == c) return true;
            return false;
        }*/

        public static void main(String[] args) {
//        while (true) {
            playOneRound();
//            System.out.println("Play again?");
//            if (SCANNER.next().equals("no"))
//                break;
//        }
        }

        private static void playOneRound() {
            initField();
            printField();
            while (true) {
                humanTurn();
                printField();
                if (checkWin(DOT_HUMAN)) {
                    System.out.println("???????????°?» ??????????!");
                    break;
                }
                if (isFieldFull()) {
                    System.out.println("??????????!");
                    break;
                }
                aiTurn();
                printField();
                if (checkWin(DOT_AI)) {
                    System.out.println("???????????°?» ???????????????µ??!");
                    break;
                }
                if (isFieldFull()) {
                    System.out.println("??????????!");
                    break;
                }
            }
        }

    }
